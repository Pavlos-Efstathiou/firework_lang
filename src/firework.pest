WHITESPACE = _{ " " | "\t" }
COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" ~ NEWLINE? }

ARROW = _{ "->" }
LPAREN = _{ "(" }
RPAREN = _{ ")" }
COLON = _{ ":" }
EQ = _{ "=" }

name_char = _{ ASCII_ALPHA | "_" }

name = @{ name_char+ }

module_name = @{ (name_char | "::")+ }

// Types 
type_char = _{ name_char | ASCII_DIGIT }

firework_type = @{ type_char+ ~ ("()")? } // Workaround

type_signature = { COLON ~ firework_type }

int = @{ "-"? ~ ASCII_DIGIT+ }

boolean = { "true" | "false" }

string = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }

char = @{ "'" ~ (!"'" ~ ANY)? ~ "'" }

enum_type = { "enum" ~ name ~ EQ ~ name ~ ("|" ~ name)+?}

literal = { int | boolean | string | char | anon_fn }

identifier = !{ name ~ expr+? }

// Functions 
fn_args = { (name ~ type_signature)+ }

declaration = { "let" ~ name ~ (LPAREN ~ fn_args ~ RPAREN)? ~ type_signature ~ EQ ~ expr }

anon_fn = { LPAREN ~ fn_args? ~ RPAREN ~ type_signature ~ ARROW ~ expr }

// Modules
module_import = { "import" ~  module_name }

module_declaration = { "module" ~ module_name }

// If statements
if_statement = { "if" ~ expr ~ expr ~ "else" ~ expr }

// File
expr = _{ ( if_statement | literal | identifier) }

stmt = _{ (declaration | module_declaration | module_import | enum_type) }

repl = !{ SOI ~ (stmt | expr ~ NEWLINE?)? ~ EOI }

program = _{ SOI ~ ((stmt ~ NEWLINE?) | NEWLINE)* ~ EOI }
